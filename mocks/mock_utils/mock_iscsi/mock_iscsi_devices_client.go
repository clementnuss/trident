// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/utils/iscsi (interfaces: Devices)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_utils/mock_iscsi/mock_iscsi_devices_client.go github.com/netapp/trident/utils/iscsi Devices
//

// Package mock_iscsi is a generated GoMock package.
package mock_iscsi

import (
	context "context"
	reflect "reflect"

	models "github.com/netapp/trident/utils/models"
	gomock "go.uber.org/mock/gomock"
)

// MockDevices is a mock of Devices interface.
type MockDevices struct {
	ctrl     *gomock.Controller
	recorder *MockDevicesMockRecorder
}

// MockDevicesMockRecorder is the mock recorder for MockDevices.
type MockDevicesMockRecorder struct {
	mock *MockDevices
}

// NewMockDevices creates a new mock instance.
func NewMockDevices(ctrl *gomock.Controller) *MockDevices {
	mock := &MockDevices{ctrl: ctrl}
	mock.recorder = &MockDevicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevices) EXPECT() *MockDevicesMockRecorder {
	return m.recorder
}

// EnsureDeviceReadable mocks base method.
func (m *MockDevices) EnsureDeviceReadable(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDeviceReadable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureDeviceReadable indicates an expected call of EnsureDeviceReadable.
func (mr *MockDevicesMockRecorder) EnsureDeviceReadable(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDeviceReadable", reflect.TypeOf((*MockDevices)(nil).EnsureDeviceReadable), arg0, arg1)
}

// EnsureLUKSDeviceMappedOnHost mocks base method.
func (m *MockDevices) EnsureLUKSDeviceMappedOnHost(arg0 context.Context, arg1 models.LUKSDeviceInterface, arg2 string, arg3 map[string]string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureLUKSDeviceMappedOnHost", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureLUKSDeviceMappedOnHost indicates an expected call of EnsureLUKSDeviceMappedOnHost.
func (mr *MockDevicesMockRecorder) EnsureLUKSDeviceMappedOnHost(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureLUKSDeviceMappedOnHost", reflect.TypeOf((*MockDevices)(nil).EnsureLUKSDeviceMappedOnHost), arg0, arg1, arg2, arg3)
}

// GetDeviceFSType mocks base method.
func (m *MockDevices) GetDeviceFSType(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceFSType", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceFSType indicates an expected call of GetDeviceFSType.
func (mr *MockDevicesMockRecorder) GetDeviceFSType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceFSType", reflect.TypeOf((*MockDevices)(nil).GetDeviceFSType), arg0, arg1)
}

// GetISCSIDiskSize mocks base method.
func (m *MockDevices) GetISCSIDiskSize(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetISCSIDiskSize", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetISCSIDiskSize indicates an expected call of GetISCSIDiskSize.
func (mr *MockDevicesMockRecorder) GetISCSIDiskSize(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetISCSIDiskSize", reflect.TypeOf((*MockDevices)(nil).GetISCSIDiskSize), arg0, arg1)
}

// IsDeviceUnformatted mocks base method.
func (m *MockDevices) IsDeviceUnformatted(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDeviceUnformatted", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDeviceUnformatted indicates an expected call of IsDeviceUnformatted.
func (mr *MockDevicesMockRecorder) IsDeviceUnformatted(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDeviceUnformatted", reflect.TypeOf((*MockDevices)(nil).IsDeviceUnformatted), arg0, arg1)
}

// NewLUKSDevice mocks base method.
func (m *MockDevices) NewLUKSDevice(arg0, arg1 string) (models.LUKSDeviceInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewLUKSDevice", arg0, arg1)
	ret0, _ := ret[0].(models.LUKSDeviceInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewLUKSDevice indicates an expected call of NewLUKSDevice.
func (mr *MockDevicesMockRecorder) NewLUKSDevice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewLUKSDevice", reflect.TypeOf((*MockDevices)(nil).NewLUKSDevice), arg0, arg1)
}

// WaitForDevice mocks base method.
func (m *MockDevices) WaitForDevice(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForDevice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForDevice indicates an expected call of WaitForDevice.
func (mr *MockDevicesMockRecorder) WaitForDevice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForDevice", reflect.TypeOf((*MockDevices)(nil).WaitForDevice), arg0, arg1)
}
