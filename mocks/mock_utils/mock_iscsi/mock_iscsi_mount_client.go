// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/netapp/trident/utils/iscsi (interfaces: Mount)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_utils/mock_iscsi/mock_iscsi_mount_client.go github.com/netapp/trident/utils/iscsi Mount
//

// Package mock_iscsi is a generated GoMock package.
package mock_iscsi

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMount is a mock of Mount interface.
type MockMount struct {
	ctrl     *gomock.Controller
	recorder *MockMountMockRecorder
}

// MockMountMockRecorder is the mock recorder for MockMount.
type MockMountMockRecorder struct {
	mock *MockMount
}

// NewMockMount creates a new mock instance.
func NewMockMount(ctrl *gomock.Controller) *MockMount {
	mock := &MockMount{ctrl: ctrl}
	mock.recorder = &MockMountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMount) EXPECT() *MockMountMockRecorder {
	return m.recorder
}

// IsMounted mocks base method.
func (m *MockMount) IsMounted(arg0 context.Context, arg1, arg2, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMounted", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMounted indicates an expected call of IsMounted.
func (mr *MockMountMockRecorder) IsMounted(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMounted", reflect.TypeOf((*MockMount)(nil).IsMounted), arg0, arg1, arg2, arg3)
}

// MountDevice mocks base method.
func (m *MockMount) MountDevice(arg0 context.Context, arg1, arg2, arg3 string, arg4 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountDevice", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountDevice indicates an expected call of MountDevice.
func (mr *MockMountMockRecorder) MountDevice(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountDevice", reflect.TypeOf((*MockMount)(nil).MountDevice), arg0, arg1, arg2, arg3, arg4)
}
